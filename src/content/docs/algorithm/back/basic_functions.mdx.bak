---
title: 基本的な関数
description: 説明文など
layout: '../../../layouts/BaseLayout.astro'
---

import CC  from "../../../components/c-c.astro";

import {
         Box, RedBox, WhiteBox, MemoBox, 
         CodeTitle, TimeStamp,
         TwoColumn, Left, Right,
         Indent,StandardStyle} from '../../../components/';

<StandardStyle />


##### TODOs

 - [x] nothing


## smooth_step関数
```text
// スムーズステップ関数
float smooth_step(float t) {
    t = clamp01(t);
    return t * t * (3.0 - 2.0 * t);
}
```
   <center><img src="/smoothstep.png" width="400" height="300" /></center>  

- glslでは4種類のシグニチャがある
- edge0以下なら０，edge1以上なら1の補間対象xの値で値を出力

```glsl
 float smoothstep(float edge0, float edge1, float x);
 vec2 smoothstep(vec2 edge0, vec2 edge1, vec2 x);
 vec3 smoothstep(vec3 edge0, vec3 edge1, vec3 x);
 vec4 smoothstep(vec4 edge0, vec4 edge1, vec4 x);
```
<br/>

- clamp関数を利用して下記のようにsmoothstepを表現することもできる

```glsl
t=clamp((x-edge0)/(edge1-edge0),0,1)
return t*t*(3.0-2.0*t)
```


## clamp

clamp(x, min, max) は、値 x を指定された範囲 [min, max] に制限する関数。
- x < min のとき → 結果は min
- min ? x ? max のとき → 結果は x
- x > max のとき → 結果は max

値が範囲外に出ないよう「切り詰める」役割を持つ。線形補間やノイズ制限などに利用
   <center><img src="/clamp.png" width="400" height="300" /></center>
   
-min, maxを用いて下記のように表現することもできる
```glsl
min(max(x, min),max)
```
